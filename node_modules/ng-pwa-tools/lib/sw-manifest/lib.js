"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var path = require("path");
var sha1_raw = require("sha1");
var lib_1 = require("../ls-routes/lib");
var ng_1 = require("../common/ng");
var util_1 = require("../common/util");
function sha1(file) {
    var raw = sha1_raw(fs.readFileSync(file), { asBytes: true });
    return Buffer.from(raw).toString('hex');
}
function genStaticManifest(dist, baseUrl, ignore) {
    if (baseUrl === void 0) { baseUrl = '/'; }
    if (ignore === void 0) { ignore = []; }
    if (baseUrl.endsWith('/')) {
        baseUrl = baseUrl.substr(0, baseUrl.length - 1);
    }
    var ignoreList = ignore.map(function (regex) { return new RegExp(regex); });
    var manifest = util_1.recursiveListDir(dist)
        .filter(function (entry) { return !ignoreList.some(function (ignore) { return ignore.test(baseUrl + "/" + entry); }); })
        .reduce(function (manifest, entry) {
        manifest[baseUrl + "/" + entry] = sha1(path.join(dist, entry));
        return manifest;
    }, {});
    return Promise.resolve(manifest);
}
exports.genStaticManifest = genStaticManifest;
function genRoutingManifest(index, modulePath, loadChildrenRoot, baseUrl) {
    if (baseUrl === void 0) { baseUrl = '/'; }
    if (baseUrl.endsWith('/')) {
        baseUrl = baseUrl.substr(0, baseUrl.length - 1);
    }
    var module = ng_1.loadNgModule(modulePath);
    return lib_1.extractTerminals(module, loadChildrenRoot)
        .then(function (terminals) { return terminals.map(function (terminal) { return lib_1.matcherForTerminal(terminal, baseUrl); }); })
        .then(function (matchers) { return matchers.reduce(function (routes, matcher) {
        routes[matcher.pattern] = { match: matcher.match };
        return routes;
    }, {}); })
        .then(function (routes) { return ({ index: index, routes: routes }); });
}
exports.genRoutingManifest = genRoutingManifest;
