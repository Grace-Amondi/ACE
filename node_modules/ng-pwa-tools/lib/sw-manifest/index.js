"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("zone.js/dist/zone-node.js");
var fs = require("fs");
var lib_1 = require("./lib");
function mergeConfig(mergeTo, mergeFrom) {
    Object.keys(mergeFrom).forEach(function (key) {
        var value = mergeFrom[key];
        if (mergeTo[key]) {
            if (Array.isArray(mergeTo[value])) {
                if (Array.isArray(value)) {
                    mergeTo[key] = mergeTo[key].concat(value);
                }
                else {
                    mergeTo[key].push(value);
                }
            }
            else if (typeof value === 'object') {
                mergeTo[key] = mergeConfig(mergeTo[key], value);
            }
            else {
                mergeTo[key] = value;
            }
        }
        else {
            mergeTo[key] = value;
        }
    });
}
function generateSwManifest(args) {
    var manifest = {};
    if (args.manifest) {
        manifest = JSON.parse(fs.readFileSync(args.manifest).toString());
    }
    var mRouting = Promise.resolve(null);
    if (args.routing) {
        mRouting = lib_1.genRoutingManifest(args.index || 'index.html', args.appModule, args.loadChildrenRoot, args.baseHref);
    }
    var mStatic = Promise.resolve(null);
    if (args.static) {
        mStatic = lib_1.genStaticManifest(args.dist, args.baseHref, manifest['static.ignore'])
            .then(function (urls) {
            var staticSection = { urls: urls };
            if (manifest.hasOwnProperty('static.versioned')) {
                staticSection.versioned = manifest['static.versioned'];
            }
            return staticSection;
        });
    }
    return Promise
        .all([mRouting, mStatic])
        .then(function (_a) {
        var cRouting = _a[0], cStatic = _a[1];
        if (args.routing) {
            mergeConfig(manifest, { routing: cRouting });
        }
        if (args.static) {
            mergeConfig(manifest, { static: cStatic });
        }
        Object
            .keys(manifest)
            .filter(function (key) { return key.startsWith('static.'); })
            .forEach(function (key) { return delete manifest[key]; });
        return manifest;
    });
}
exports.generateSwManifest = generateSwManifest;
