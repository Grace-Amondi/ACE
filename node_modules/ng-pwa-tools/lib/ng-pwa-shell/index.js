"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("zone.js/dist/zone-node.js");
var core_1 = require("@angular/core");
var platform_server_1 = require("@angular/platform-server");
var ng_1 = require("../common/ng");
var fs = require("fs");
var path = require("path");
function makeServerModule(args) {
    var AppModule = ng_1.loadNgModule(args.appModule);
    var imports = [];
    if (args.beforeAppModule) {
        imports.push(ng_1.loadNgModule(args.beforeAppModule));
    }
    imports.push(AppModule);
    if (args.afterAppModule) {
        imports.push(ng_1.loadNgModule(args.afterAppModule));
    }
    imports.push(platform_server_1.ServerModule);
    var providers = [];
    if (args.loadChildrenRoot) {
        providers.push({
            provide: core_1.NgModuleFactoryLoader,
            useValue: new RequireNgModuleFactoryLoader(args.loadChildrenRoot),
        });
    }
    var annotations = Reflect.getMetadata('annotations', AppModule)[0];
    var bootstrap = annotations.bootstrap;
    var ServerAppModule = (function () {
        function ServerAppModule() {
        }
        return ServerAppModule;
    }());
    ServerAppModule = __decorate([
        core_1.NgModule({ bootstrap: bootstrap, imports: imports, providers: providers })
    ], ServerAppModule);
    return ServerAppModule;
}
function generateAppShell(args) {
    var AppShellModule = makeServerModule(args);
    var indexHtml = fs.readFileSync(args.index).toString();
    return ng_1.jitCompiler()
        .compileModuleAsync(AppShellModule)
        .then(function (factory) { return platform_server_1.renderModuleFactory(factory, { url: args.url || '/', document: indexHtml }); });
}
exports.generateAppShell = generateAppShell;
var RequireNgModuleFactoryLoader = (function () {
    function RequireNgModuleFactoryLoader(root) {
        this.root = root;
    }
    RequireNgModuleFactoryLoader.prototype.load = function (pathAndHash) {
        var _a = pathAndHash.split('#'), modPath = _a[0], exportName = _a[1];
        var reqModPath = path.join(this.root, modPath);
        var module = require(reqModPath)[exportName];
        return ng_1.jitCompiler().compileModuleAsync(module);
    };
    return RequireNgModuleFactoryLoader;
}());
