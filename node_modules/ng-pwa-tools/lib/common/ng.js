"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("reflect-metadata");
require("zone.js/dist/zone-node.js");
var core_1 = require("@angular/core");
var compiler_1 = require("@angular/compiler");
var fs = require("fs");
var NG_MODULE_KEYS = ['providers', 'declarations', 'imports', 'exports', 'entryComponents', 'bootstrap', 'schemas', 'id'];
function hasNgModuleMetadata(value) {
    if (typeof value !== 'function') {
        return false;
    }
    if (Reflect.getMetadataKeys(value).indexOf('annotations') === -1) {
        return false;
    }
    var annotations = Reflect.getMetadata('annotations', value);
    return annotations.some(function (annotation) { return Object.keys(annotation).every(function (key) { return NG_MODULE_KEYS.indexOf(key) !== -1; }); });
}
var FileLoader = (function () {
    function FileLoader() {
    }
    FileLoader.prototype.get = function (url) {
        return new Promise(function (resolve, reject) {
            resolve(fs.readFileSync(url).toString());
        });
    };
    return FileLoader;
}());
function loadNgModule(modPath, moduleName) {
    var exported = require(modPath);
    if (moduleName) {
        return exported[moduleName];
    }
    var modules = Object
        .keys(exported)
        .filter(function (key) { return hasNgModuleMetadata(exported[key]); });
    if (modules.length === 0) {
        throw new Error(modPath + " contains no @NgModules");
    }
    else if (modules.length > 1) {
        throw new Error(modPath + " contains more than 1 @NgModule");
    }
    return exported[modules[0]];
}
exports.loadNgModule = loadNgModule;
var _jitCompiler = null;
function jitCompiler() {
    if (_jitCompiler === null) {
        core_1.enableProdMode();
        var injector = core_1.ReflectiveInjector.resolveAndCreate([
            compiler_1.COMPILER_PROVIDERS,
            { provide: compiler_1.ResourceLoader, useValue: new FileLoader() }
        ]);
        _jitCompiler = injector.get(compiler_1.JitCompiler);
    }
    return _jitCompiler;
}
exports.jitCompiler = jitCompiler;
