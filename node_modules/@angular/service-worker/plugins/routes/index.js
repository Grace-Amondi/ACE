import { rewriteUrlInstruction, UrlMatcher, } from '@angular/service-worker/worker';
export function RouteRedirection() {
    return function (worker) { return new RouteRedirectionImpl(worker); };
}
var RouteRedirectionImpl = (function () {
    function RouteRedirectionImpl(worker) {
        this.worker = worker;
    }
    Object.defineProperty(RouteRedirectionImpl.prototype, "routeManifest", {
        get: function () {
            return this.worker.manifest['routing'];
        },
        enumerable: true,
        configurable: true
    });
    RouteRedirectionImpl.prototype.hasExtension = function (path) {
        var lastSegment = path.substr(path.lastIndexOf('/') + 1);
        return lastSegment.indexOf('.') !== -1;
    };
    RouteRedirectionImpl.prototype.setup = function (operations) {
        // No setup needed.
    };
    RouteRedirectionImpl.prototype.fetch = function (req) {
        var _this = this;
        var manifest = this.routeManifest;
        if (!manifest || !manifest.routes) {
            return;
        }
        var _a = parseUrl(req.url), base = _a[0], path = _a[1];
        var matchesRoutingTable = Object.keys(manifest.routes).some(function (route) {
            var config = manifest.routes[route];
            if (config['match']) {
                var matcher = new UrlMatcher(route, config, _this.worker.adapter.scope);
                return matcher.matches(req.url);
            }
            else {
                var oldConfig = config;
                var matchesPath = oldConfig.prefix
                    ? path.indexOf(route) === 0
                    : path === route;
                var matchesPathAndExtension = matchesPath &&
                    (!oldConfig.onlyWithoutExtension || !_this.hasExtension(path));
                return matchesPathAndExtension;
            }
        });
        if (matchesRoutingTable) {
            return rewriteUrlInstruction(this.worker, req, base + manifest.index);
        }
        else {
            return null;
        }
    };
    return RouteRedirectionImpl;
}());
export { RouteRedirectionImpl };
function parseUrl(full) {
    var isHttp = full.toLowerCase().startsWith('http://');
    var isHttps = full.toLowerCase().startsWith('https://');
    if (!isHttp && !isHttps) {
        // Relative url.
        return ['', full];
    }
    var protocol = 'http://';
    var protocolSuffix = full.substr('http://'.length);
    if (isHttps) {
        protocol = 'https://';
        protocolSuffix = full.substr('https://'.length);
    }
    var rootSlash = protocolSuffix.indexOf('/');
    if (rootSlash === -1) {
        return [full, '/'];
    }
    return [full.substr(0, protocol.length + rootSlash), protocolSuffix.substr(rootSlash)];
}
//# sourceMappingURL=index.js.map