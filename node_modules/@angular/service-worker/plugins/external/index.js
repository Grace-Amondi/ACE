import { cacheFromNetworkOp, fetchFromCacheInstruction, } from '@angular/service-worker/worker';
export function ExternalContentCache(options) {
    var manifestKey = (options && options.manifestKey) || 'external';
    return function (worker) { return new ExternalPlugin(worker, manifestKey); };
}
var ExternalPlugin = (function () {
    function ExternalPlugin(worker, key) {
        this.worker = worker;
        this.key = key;
        this.cacheKey = key === 'external' ? key : "external:" + key;
    }
    Object.defineProperty(ExternalPlugin.prototype, "externalManifest", {
        get: function () {
            return this.worker.manifest[this.key];
        },
        enumerable: true,
        configurable: true
    });
    ExternalPlugin.prototype.setup = function (operations) {
        var _this = this;
        if (!this.externalManifest || !this.externalManifest.urls) {
            return;
        }
        operations.push.apply(operations, this
            .externalManifest
            .urls
            .map(function (url) { return cacheFromNetworkOp(_this.worker, url.url, _this.cacheKey); }));
    };
    ExternalPlugin.prototype.fetch = function (req) {
        return fetchFromCacheInstruction(this.worker, req, this.cacheKey);
    };
    return ExternalPlugin;
}());
export { ExternalPlugin };
//# sourceMappingURL=index.js.map