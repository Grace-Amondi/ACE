/**
 * A node in in the linked list, with references to the next and previous nodes.
 */
export interface Node<T> {
    /**
     * Value stored in this node.
     */
    value: T;
    /**
     * Next node in the chain, if any.
     */
    next: Node<T> | null;
    /**
     * Previous node in the chain, if any.
     */
    prev: Node<T> | null;
}
/**
 * A function which compares two values, returning the usual -1, 0, or 1.
 */
export declare type CompareFn<T> = (a: T, b: T) => number;
/**
 * A linked list of items kept in sorted order, according to the given
 * comparison function.
 *
 * Inserting and removing are O(n), the pop() operation is O(1).
 */
export declare class SortedLinkedList<T> {
    compare: CompareFn<T>;
    /**
     * Create a new, empty list with the given comparison function.
     */
    constructor(compare: CompareFn<T>);
    /**
     * Head of the list, which is null if there are no elements.
     */
    head: Node<T> | null;
    /**
     * Tail of the list, which is null if there are no elements.
     */
    tail: Node<T> | null;
    /**
     * Tracks the current length of the list.
     */
    length: number;
    /**
     * Insert a new element in a position determined by the
     * comparison function.
     *
     * This is O(n).
     */
    insert(value: T): void;
    /**
     * Remove a value from the list.
     *
     * This is O(n).
     */
    remove(value: T): void;
    /**
     * Remove and return the head of the list, or return `null`
     * if the list is empty.
     */
    pop(): T | null;
}
