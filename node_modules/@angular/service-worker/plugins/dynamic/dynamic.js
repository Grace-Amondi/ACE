import { DynamicGroup } from './group';
export function Dynamic(strategies) {
    return function (worker) { return new DynamicImpl(worker, strategies); };
}
/**
 * A plugin which implements dynamic content caching - the caching of requests to
 * arbitrary URLs.
 */
var DynamicImpl = (function () {
    function DynamicImpl(worker, strategies) {
        var _this = this;
        this.worker = worker;
        /**
         * Map of `optimizeFor` strategies to their implementations.
         */
        this.strategies = {};
        // Extract the dynamic section of the manifest.
        this.manifest = worker.manifest['dynamic'];
        // Initially there are no side effects.
        this.sideEffectQueue = Promise.resolve();
        // Build the `strategies` map from all configured strategies.
        strategies.forEach(function (strategy) { return _this.strategies[strategy.name] = strategy; });
    }
    /**
     * After installation, setup the group array for immediate use. On
     * subsequent startups, this step is performed by `validate()`.
     */
    DynamicImpl.prototype.setup = function (ops) {
        var _this = this;
        // If no dynamic caching configuration is provided, skip this plugin.
        if (!this.manifest) {
            return;
        }
        // Ensure even on first installation, the cache groups are loaded and
        // ready to serve traffic.
        ops.push(function () { return _this._setupGroups(); });
    };
    DynamicImpl.prototype.fetch = function (req) {
        var _this = this;
        // If no dynamic caching configuration is provided, skip this plugin.
        if (!this.manifest) {
            return null;
        }
        // Return an instruction that applies dynamic content caching.
        var instruction = function (next) {
            // There may be multiple groups configured. Check whether the request matches any
            // of them.
            var groups = _this.group.filter(function (group) { return group.matches(req); });
            if (groups.length === 0) {
                // It doesn't match any groups - continue down the chain.
                return next();
            }
            // It has matched at least one group. Only the first group is considered.
            return _this
                .sideEffectQueue
                .then(function () { return groups[0].fetch(req, next); })
                .then(function (result) {
                if (!!result.sideEffect) {
                    // If there is a side effect, queue it to happen asynchronously.
                    var effect_1 = result.sideEffect;
                    _this.sideEffectQueue = _this
                        .sideEffectQueue
                        .then(function () { return effect_1(); })
                        .catch(function () { });
                }
                // Extract the response and return it.
                return result.response;
            });
        };
        return instruction;
    };
    /**
     * Ensure all configuration is valid and the Dynamic plugin is ready to serve
     * traffic.
     */
    DynamicImpl.prototype.validate = function () {
        // If no configuration was provided, this plugin is not active.
        if (!this.manifest) {
            return Promise.resolve(true);
        }
        return this
            ._setupGroups()
            .then(function () { return true; })
            .catch(function () { return false; });
    };
    /*
     * For every group configured in the manifest, instantiate the DynamicGroup
     * associated with it, which will validate the configuration. This is an async
     * operation as initializing the DynamicGroup involves loading stored state
     * from the cache.
     */
    DynamicImpl.prototype._setupGroups = function () {
        var _this = this;
        return Promise
            .all(this.manifest.group.map(function (config) {
            return DynamicGroup.open(config, _this.worker.adapter, _this.worker.cache, _this.worker.clock, _this.strategies);
        }))
            .then(function (groups) { return _this.group = groups; });
    };
    return DynamicImpl;
}());
export { DynamicImpl };
//# sourceMappingURL=dynamic.js.map