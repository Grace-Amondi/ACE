import { FetchInstruction, Operation, Plugin, PluginFactory, VersionWorkerImpl } from '@angular/service-worker/worker';
import { DynamicStrategy } from './group';
export declare function Dynamic(strategies: DynamicStrategy[]): PluginFactory<DynamicImpl>;
/**
 * A plugin which implements dynamic content caching - the caching of requests to
 * arbitrary URLs.
 */
export declare class DynamicImpl implements Plugin<DynamicImpl> {
    worker: VersionWorkerImpl;
    /**
     * The manifest configured by the user.
     */
    private manifest;
    /**
     * All `DynamicGroup`s configured, each one representing a group defined in
     * the manifest.
     */
    private group;
    /**
     * Map of `optimizeFor` strategies to their implementations.
     */
    private strategies;
    /**
     * `Promise` that tracks side effect application after requests have completed. This
     * is used to serialize application of side effects, even if requests are executed
     * in parallel.
     */
    private sideEffectQueue;
    constructor(worker: VersionWorkerImpl, strategies: DynamicStrategy[]);
    /**
     * After installation, setup the group array for immediate use. On
     * subsequent startups, this step is performed by `validate()`.
     */
    setup(ops: Operation[]): void;
    fetch(req: Request): FetchInstruction | null;
    /**
     * Ensure all configuration is valid and the Dynamic plugin is ready to serve
     * traffic.
     */
    validate(): Promise<boolean>;
    private _setupGroups();
}
