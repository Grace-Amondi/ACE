import { DynamicGroup, DynamicStrategy, ResponseWithSideEffect } from '../group';
import { CacheConfig } from '../manifest';
export interface PerformanceCacheConfig extends CacheConfig {
    optimizeFor: "performance";
    refreshAheadMs?: number;
}
/**
 * A dynamic caching strategy which optimizes for the performance of requests
 * it serves, by placing the cache before the network.
 *
 * In the performance strategy, requests always hit the cache first. If cached
 * data is available it is returned immediately, and the network is not (usually)
 * consulted.
 *
 * An exception to this rule is if the user configures a `refreshAheadMs` age.
 * If cached responses are older than this configured age, a network request will
 * be made in the background to update them, even though the cached value is
 * returned to the consumer anyway. This allows caches to still be effective while
 * not letting them become too stale.
 *
 * If data is not available in the cache, it is fetched from the network and
 * cached.
 */
export declare class PerformanceStrategy implements DynamicStrategy {
    /**
     * Name of the strategy (matched to the value in `optimizeFor`).
     */
    readonly name: string;
    /**
     * Reads the cache configuration from the group's config.
     */
    config(group: DynamicGroup): PerformanceCacheConfig;
    /**
     * Makes a request using this strategy, falling back on the `delegate` if
     * the cache is not being used.
     */
    fetch(group: DynamicGroup, req: Request, delegate: () => Promise<Response>): Promise<ResponseWithSideEffect>;
}
