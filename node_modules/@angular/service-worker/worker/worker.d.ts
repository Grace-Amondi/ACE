import { Operation, Plugin, VersionWorker, StreamController } from './api';
import { ScopedCache } from './cache';
import { NgSwAdapter, NgSwFetch, Clock } from './facade';
import { Manifest } from './manifest';
export declare class VersionWorkerImpl implements VersionWorker {
    streamController: StreamController;
    scope: ServiceWorkerGlobalScope;
    manifest: Manifest;
    adapter: NgSwAdapter;
    cache: ScopedCache;
    clock: Clock;
    private fetcher;
    private plugins;
    constructor(streamController: StreamController, scope: ServiceWorkerGlobalScope, manifest: Manifest, adapter: NgSwAdapter, cache: ScopedCache, clock: Clock, fetcher: NgSwFetch, plugins: Plugin<any>[]);
    refresh(req: Request, cacheBust?: boolean): Promise<Response>;
    fetch(req: Request): Promise<Response>;
    validate(): Promise<boolean>;
    setup(previous: VersionWorkerImpl): Promise<any>;
    cleanup(): Operation[];
    message(message: any, id: number): void;
    messageClosed(id: number): void;
    sendToStream(id: number, message: Object): void;
    closeStream(id: number): void;
    push(data: any): void;
    showNotification(title: string, options?: Object): void;
}
