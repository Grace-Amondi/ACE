import { NgSwAdapter, NgSwCache } from './facade';
import { Manifest } from './manifest';
export declare type FetchDelegate = () => Promise<Response>;
export interface FetchInstruction {
    (next: FetchDelegate): Promise<Response>;
    desc?: Object;
}
export interface Operation {
    (): Promise<any>;
    desc?: Object;
}
export interface VersionWorker extends StreamController {
    readonly manifest: Manifest;
    readonly cache: NgSwCache;
    readonly adapter: NgSwAdapter;
    refresh(req: Request, cacheBust?: boolean): Promise<Response>;
    fetch(req: Request): Promise<Response>;
    showNotification(title: string, options?: Object): void;
    sendToStream(id: number, message: Object): void;
    closeStream(id: number): void;
}
export interface StreamController {
    sendToStream(id: number, message: Object): void;
    closeStream(id: number): void;
}
export interface Plugin<T extends Plugin<T>> {
    setup(operations: Operation[]): void;
    update?(operations: Operation[], previous: T): void;
    fetch?(req: Request): FetchInstruction;
    cleanup?(operations: Operation[]): void;
    message?(message: any, id: number): void;
    messageClosed?(id: number): any;
    push?(data: any): void;
    validate?(): Promise<boolean>;
}
export interface PluginFactory<T extends Plugin<T>> {
    (worker: VersionWorker): Plugin<T>;
}
