export var Verbosity;
(function (Verbosity) {
    Verbosity[Verbosity["DEBUG"] = 1] = "DEBUG";
    Verbosity[Verbosity["TECHNICAL"] = 2] = "TECHNICAL";
    Verbosity[Verbosity["INFO"] = 3] = "INFO";
    Verbosity[Verbosity["STATUS"] = 4] = "STATUS";
    Verbosity[Verbosity["DISABLED"] = 1000] = "DISABLED";
})(Verbosity || (Verbosity = {}));
var Logger = (function () {
    function Logger() {
        this.buffer = [];
        this.verbosity = Verbosity.DISABLED;
        this.messages = function () { return null; };
    }
    Logger.prototype.debug = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this._log(Verbosity.DEBUG, message, args);
    };
    Logger.prototype.technical = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this._log(Verbosity.TECHNICAL, message, args);
    };
    Logger.prototype.info = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this._log(Verbosity.INFO, message, args);
    };
    Logger.prototype.status = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this._log(Verbosity.STATUS, message, args);
    };
    Logger.prototype.log = function (verbosity, message) {
        var args = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            args[_i - 2] = arguments[_i];
        }
        this._log(verbosity, message, args);
    };
    Logger.prototype.setVerbosity = function (verbosity) {
        this.verbosity = verbosity;
    };
    Logger.prototype.release = function () {
        var _this = this;
        this.buffer.forEach(function (entry) { return _this.messages(entry); });
        this.buffer = null;
    };
    Logger.prototype._log = function (verbosity, start, args) {
        var _this = this;
        var message = start;
        if (args.length > 0) {
            message = start + " " + args.map(function (v) { return _this._serialize(v); }).join(' ');
        }
        if (verbosity < this.verbosity) {
            // Skip this message.
            return;
        }
        if (this.buffer !== null) {
            this.buffer.push({ verbosity: verbosity, message: message });
        }
        else {
            this.messages({ verbosity: verbosity, message: message });
        }
    };
    Logger.prototype._serialize = function (v) {
        if (typeof v !== 'object') {
            return "" + v;
        }
        return JSON.stringify(v);
    };
    return Logger;
}());
export { Logger };
var ConsoleHandler = (function () {
    function ConsoleHandler() {
    }
    ConsoleHandler.prototype.handle = function (entry) {
        console.log(Verbosity[entry.verbosity].toString() + ": " + entry.message);
    };
    return ConsoleHandler;
}());
export { ConsoleHandler };
var HttpHandler = (function () {
    function HttpHandler(url) {
        this.url = url;
    }
    HttpHandler.prototype.handle = function (entry) {
        fetch(this.url, { body: Verbosity[entry.verbosity].toString() + ": " + entry.message, method: 'POST' });
    };
    return HttpHandler;
}());
export { HttpHandler };
export var LOGGER = new Logger();
export var LOG = LOGGER;
//# sourceMappingURL=logging.js.map