export function cacheFromNetworkOp(worker, url, cache, cacheBust) {
    if (cacheBust === void 0) { cacheBust = true; }
    var limit = 3;
    var helper = function (url) {
        if (limit-- === 0) {
            return Promise.reject("Hit redirect limit when attempting to fetch " + url + ".");
        }
        var req = worker.adapter.newRequest(url);
        var reqPromise = null;
        return worker.refresh(req, cacheBust).then(function (res) {
            if (res['redirected'] && res.url && res.url !== '') {
                return helper(res.url);
            }
            return res;
        });
    };
    var op = function () { return helper(url)
        .then(function (resp) { return worker.cache.store(cache, url, resp); }); };
    op.desc = { type: 'cacheFromNetworkOp', worker: worker, url: url, cache: cache };
    return op;
}
export function copyExistingCacheOp(oldWorker, newWorker, url, cache) {
    var op = function () { return oldWorker
        .cache
        .load(cache, url)
        .then(function (resp) { return !!resp
        ? newWorker.cache.store(cache, url, resp).then(function () { return true; })
        : null; }); };
    op.desc = { type: 'copyExistingCacheOp', oldWorker: oldWorker, newWorker: newWorker, url: url, cache: cache };
    return op;
}
export function copyExistingOrFetchOp(oldWorker, newWorker, url, cache) {
    var op = function () { return copyExistingCacheOp(oldWorker, newWorker, url, cache)()
        .then(function (res) {
        if (!res) {
            return cacheFromNetworkOp(newWorker, url, cache)();
        }
        return res;
    }); };
    op.desc = { type: 'copyExistingOrFetchOp', oldWorker: oldWorker, newWorker: newWorker, url: url, cache: cache };
    return op;
}
export function deleteCacheOp(worker, key) {
    var op = function () { return worker.cache.remove(key); };
    op.desc = { type: 'deleteCacheOp', worker: worker, key: key };
    return op;
}
export function fetchFromCacheInstruction(worker, req, cache) {
    var op = function (next) { return worker.cache.load(cache, req)
        .then(function (res) { return !!res ? res : next(); }); };
    op.desc = { type: 'fetchFromCacheInstruction', worker: worker, req: req, cache: cache };
    return op;
}
export function fetchFromNetworkInstruction(worker, req, shouldRefresh) {
    if (shouldRefresh === void 0) { shouldRefresh = true; }
    var op = function (next) { return shouldRefresh ? worker.refresh(req) : worker.scope.fetch(req); };
    op.desc = { type: 'fetchFromNetworkInstruction', worker: worker, req: req };
    return op;
}
export function rewriteUrlInstruction(worker, req, destUrl) {
    var newReq = worker.adapter.newRequest(destUrl);
    var op = function (next) { return worker.fetch(newReq); };
    op.desc = { type: 'rewriteUrlInstruction', worker: worker, req: req, destUrl: destUrl };
    return op;
}
//# sourceMappingURL=common.js.map