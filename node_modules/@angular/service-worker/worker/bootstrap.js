import { NgSwCacheImpl, NgSwEvents, NgSwFetch, BrowserClock } from './facade';
import { Driver } from './driver';
import { LOGGER } from './logging';
var PAGE_SCOPE_FROM_SW_SCOPE = /^(https?:\/\/[^/]+)(\/.*)?$/;
// The scope is the global object.
var scope = ((typeof self !== 'undefined') ? self : global);
function copyRequest(req) {
    var copy = {
        method: req.method,
        headers: req.headers,
        credentials: req.credentials,
        cache: req.cache,
        redirect: req.redirect,
        referrer: req.referrer,
    };
    if (req.mode.toString() !== 'navigate') {
        copy['mode'] = req.mode;
    }
    return copy;
}
var NgSwBrowserAdapter = (function () {
    function NgSwBrowserAdapter() {
        this._scope = PAGE_SCOPE_FROM_SW_SCOPE.exec(scope.registration.scope)[1];
    }
    NgSwBrowserAdapter.prototype.newRequest = function (req, init) {
        if (init && init instanceof Request) {
            init = copyRequest(init);
        }
        return new Request(req, init);
    };
    NgSwBrowserAdapter.prototype.newResponse = function (body, init) {
        return new Response(body, init);
    };
    Object.defineProperty(NgSwBrowserAdapter.prototype, "scope", {
        get: function () {
            return this._scope;
        },
        enumerable: true,
        configurable: true
    });
    return NgSwBrowserAdapter;
}());
export function bootstrapServiceWorker(options) {
    var manifestUrl = (options && options.manifestUrl) || '/ngsw-manifest.json';
    var plugins = (options && options.plugins) || [];
    var adapter = new NgSwBrowserAdapter();
    var cache = new NgSwCacheImpl(scope.caches, adapter);
    var events = new NgSwEvents(scope);
    var fetch = new NgSwFetch(scope, adapter);
    var clock = new BrowserClock();
    LOGGER.setVerbosity(options.logLevel);
    if (!!options.logHandlers) {
        LOGGER.messages = (function (entry) { return options.logHandlers.forEach(function (handler) { return handler.handle(entry); }); });
    }
    LOGGER.release();
    return new Driver(manifestUrl, plugins, scope, adapter, cache, events, fetch, clock);
}
//# sourceMappingURL=bootstrap.js.map