export declare enum Verbosity {
    DEBUG = 1,
    TECHNICAL = 2,
    INFO = 3,
    STATUS = 4,
    DISABLED = 1000,
}
export interface LogEntry {
    message: string;
    verbosity: Verbosity;
}
export interface Logging {
    debug(message: string, ...args: any[]): void;
    technical(message: string, ...args: any[]): void;
    info(message: string, ...args: any[]): void;
    status(message: string, ...args: any[]): void;
    log(verbosity: Verbosity, message: string, ...args: any[]): void;
}
export interface LogHandler {
    handle(msg: LogEntry): any;
}
export declare class Logger implements Logging {
    private buffer;
    private verbosity;
    constructor();
    messages: Function;
    debug(message: string, ...args: any[]): void;
    technical(message: string, ...args: any[]): void;
    info(message: string, ...args: any[]): void;
    status(message: string, ...args: any[]): void;
    log(verbosity: Verbosity, message: string, ...args: any[]): void;
    setVerbosity(verbosity: Verbosity): void;
    release(): void;
    private _log(verbosity, start, args);
    private _serialize(v);
}
export declare class ConsoleHandler implements LogHandler {
    handle(entry: LogEntry): void;
}
export declare class HttpHandler implements LogHandler {
    private url;
    constructor(url: string);
    handle(entry: LogEntry): void;
}
export declare const LOGGER: Logger;
export declare const LOG: Logging;
