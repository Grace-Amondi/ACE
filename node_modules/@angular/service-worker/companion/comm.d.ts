import { NgZone } from '@angular/core';
import { Observable } from 'rxjs/Observable';
export declare function doAsync<T>(fn: (T) => Observable<any>): any;
import 'rxjs/add/observable/concat';
import 'rxjs/add/observable/defer';
import 'rxjs/add/observable/empty';
import 'rxjs/add/observable/from';
import 'rxjs/add/observable/fromEvent';
import 'rxjs/add/observable/merge';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/timer';
import 'rxjs/add/operator/concatMap';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/expand';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/first';
import 'rxjs/add/operator/let';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/publishReplay';
import 'rxjs/add/operator/reduce';
import 'rxjs/add/operator/share';
import 'rxjs/add/operator/switchMap';
import 'rxjs/add/operator/take';
import 'rxjs/add/operator/takeWhile';
export interface PushOptions {
    applicationServerKey?: string;
}
export interface UpdateEvent {
    type: "pending" | "activation";
    version?: string;
}
export declare class NgPushRegistration {
    private ps;
    constructor(ps: any);
    auth(): string;
    key(method?: string): string;
    readonly url: string;
    toJSON(): Object;
    unsubscribe(): Observable<boolean>;
}
export declare class NgServiceWorker {
    private zone;
    private container;
    private controllingWorker;
    private awaitSingleControllingWorker;
    push: Observable<any>;
    updates: Observable<UpdateEvent>;
    constructor(zone: NgZone);
    private registrationForWorker();
    private sendToWorker(worker, message);
    private send(message);
    ping(): Observable<any>;
    log(): Observable<string>;
    activateUpdate(version: string): Observable<boolean>;
    registerForPush(pushOptions?: PushOptions): Observable<NgPushRegistration>;
    checkForUpdate(): Observable<boolean>;
}
